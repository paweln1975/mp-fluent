The ``Data Structures`` module
======================

Using ``Card and CardDeck``
-------------------
>>> from data_structs.deck import Card, CardDeck, card_sort_order
>>> card_1 = Card('7', 'kier')
>>> card_1
Card(rank='7', suit='kier')
>>> deck = CardDeck()

Simple use of len function thanks to delegation to __len__
>>> len(deck)
52
>>> deck[0]
Card(rank='2', suit='kier')
>>> deck[1]
Card(rank='3', suit='kier')
>>> deck[2]
Card(rank='4', suit='kier')

Possibility to use slicing
>>> deck[:3]
[Card(rank='2', suit='kier'), Card(rank='3', suit='kier'), Card(rank='4', suit='kier')]

Pick every 13th card
>>> deck[::13]
[Card(rank='2', suit='kier'), Card(rank='2', suit='karo'), Card(rank='2', suit='pik'), Card(rank='2', suit='trefl')]

Possibility to pick random object
>>> from random import choice
>>> choice(deck) # doctest: +ELLIPSIS
Card(...)

Deck is iterable
>>> for c in deck[0:4]:
...    print(c)
Card(rank='2', suit='kier')
Card(rank='3', suit='kier')
Card(rank='4', suit='kier')
Card(rank='5', suit='kier')

Check existence (no __contains__ method so it does sequential scan)
>>> Card('Q', 'karo') in deck
True
>>> Card('7', 'beasts') in deck
False

Possibility to sort after adding a method to calculate a key
>>> for card in sorted(deck, key=card_sort_order, reverse=True): # doctest: +ELLIPSIS
...    print(card)
Card(rank='A', suit='kier')
Card(rank='A', suit='karo')
Card(rank='A', suit='pik')
Card(rank='A', suit='trefl')
...
Card(rank='2', suit='kier')
Card(rank='2', suit='karo')
Card(rank='2', suit='pik')
Card(rank='2', suit='trefl')

